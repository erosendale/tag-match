openapi: 3.0.0
info:
  version: "0.0.1"
  title: Tag Matching App
# during dev, should point to your local machine
servers:
  - url: http://localhost:3000/api/v1/
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
security:
  - bearerAuth: []
paths:
  /users/register:
    post:
      description: Register a user account
      operationId: registerUser
      tags:
        - authentication
      security: []
      parameters:
        - name: user
          in: body
          description: The user object
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/components/schemas/AuthTokenResponse"
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  /like/{userId}:
    post:
      description: Add a like from one profile to another
      operationId: addLike
      parameters:
        - name: userId
          in: path
          description: User ID to like
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Success
          schema:
            type: string
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    delete:
      description: Unmatch a profile
      operationId: deleteLike
      parameters:
        - name: userId
          in: path
          description: User ID to unlike
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          schema:
            type: string
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  /find:
    get:
      description: Returns a set of profiles fitting criteria for a profile id
      operationId: findProfiles
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ProfileObject"
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  /profile/{userId}:
    get:
      description: Returns a profile by id
      operationId: getProfile
      parameters:
        - name: userId
          in: path
          description: User ID of the profile to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/components/schemas/ProfileObject"
        '401':
          $ref: '#/components/schemas/UnauthorizedError'
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  /profile:
    post:
      description: Create a profile
      operationId: createProfile
      parameters:
        - name: profile
          in: body
          description: The profile body
          required: true
          schema:
            $ref: "#/components/schemas/ProfileObject"
      responses:
        "201":
          description: Success
          schema:
            type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: Error
          schema:
            $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      properties:
        emailAddress:
          type: string
        password:
          type: string
    ProfileObject:
      properties:
        name:
          type: string
        dateOfBirth:
          type: string
          description: YYYY-MM-DD To be formatted by the frontend
        occupation:
          type: string
        bio:
          type: string
        photos:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        maxDistance:
          type: number
          description: In kilometers.
        ageRange:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
    AuthTokenResponse:
      properties:
        success:
          type: string
        token:
          type: string
    ErrorResponse:
      properties:
        statusCode:
          type: integer
        errorCode:
          type: integer
        errorMsg:
          type: string
        stackTrace:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  
